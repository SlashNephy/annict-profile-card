schema {
  query: Query
  mutation: Mutation
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"Marks the field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ENUM_VALUE
"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR
"An object with an ID."
interface Node {
  "ID of the object."
  id: ID!
}
union ActivityItem = MultipleRecord | Record | Review | Status
union StaffResourceItem = Organization | Person
type Activity implements Node {
  annictId: Int!
  "ID of the object."
  id: ID!
  user: User!
}
"The connection type for Activity."
type ActivityConnection {
  "A list of edges."
  edges: [ActivityEdge]
  "A list of nodes."
  nodes: [Activity]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type ActivityEdge {
  action: ActivityAction!
  annictId: Int!
  "A cursor for use in pagination."
  cursor: String!
  node: ActivityItem
  user: User!
}
type Cast implements Node {
  annictId: Int!
  character: Character!
  id: ID!
  name: String!
  nameEn: String!
  person: Person!
  sortNumber: Int!
  work: Work!
}
"The connection type for Cast."
type CastConnection {
  "A list of edges."
  edges: [CastEdge]
  "A list of nodes."
  nodes: [Cast]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type CastEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Cast
}
type Channel implements Node {
  annictId: Int!
  channelGroup: ChannelGroup!
  id: ID!
  name: String!
  programs(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int
  ): ProgramConnection
  published: Boolean!
  scChid: Int!
}
"The connection type for Channel."
type ChannelConnection {
  "A list of edges."
  edges: [ChannelEdge]
  "A list of nodes."
  nodes: [Channel]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type ChannelEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Channel
}
type ChannelGroup implements Node {
  annictId: Int!
  channels(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int
  ): ChannelConnection
  id: ID!
  name: String!
  sortNumber: Int!
}
type Character implements Node {
  age: String!
  ageEn: String!
  annictId: Int!
  birthday: String!
  birthdayEn: String!
  bloodType: String!
  bloodTypeEn: String!
  description: String!
  descriptionEn: String!
  descriptionSource: String!
  descriptionSourceEn: String!
  favoriteCharactersCount: Int!
  height: String!
  heightEn: String!
  id: ID!
  name: String!
  nameEn: String!
  nameKana: String!
  nationality: String!
  nationalityEn: String!
  nickname: String!
  nicknameEn: String!
  occupation: String!
  occupationEn: String!
  series: Series!
  weight: String!
  weightEn: String!
}
"The connection type for Character."
type CharacterConnection {
  "A list of edges."
  edges: [CharacterEdge]
  "A list of nodes."
  nodes: [Character]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type CharacterEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Character
}
"Autogenerated return type of CreateRecord"
type CreateRecordPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  record: Record
}
"Autogenerated return type of CreateReview"
type CreateReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  review: Review
}
"Autogenerated return type of DeleteRecord"
type DeleteRecordPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  episode: Episode
}
"Autogenerated return type of DeleteReview"
type DeleteReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  work: Work
}
"An episode of a work"
type Episode implements Node {
  annictId: Int!
  id: ID!
  nextEpisode: Episode
  number: Int
  numberText: String
  prevEpisode: Episode
  recordCommentsCount: Int!
  records(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    hasComment: Boolean, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: RecordOrder
  ): RecordConnection
  recordsCount: Int!
  satisfactionRate: Float
  sortNumber: Int!
  title: String
  viewerDidTrack: Boolean!
  viewerRecordsCount: Int!
  work: Work!
}
"The connection type for Episode."
type EpisodeConnection {
  "A list of edges."
  edges: [EpisodeEdge]
  "A list of nodes."
  nodes: [Episode]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type EpisodeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Episode
}
type MultipleRecord implements Node {
  annictId: Int!
  createdAt: DateTime!
  id: ID!
  records(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordConnection
  user: User!
  work: Work!
}
type Mutation {
  createRecord(input: CreateRecordInput!): CreateRecordPayload
  createReview(input: CreateReviewInput!): CreateReviewPayload
  deleteRecord(input: DeleteRecordInput!): DeleteRecordPayload
  deleteReview(input: DeleteReviewInput!): DeleteReviewPayload
  updateRecord(input: UpdateRecordInput!): UpdateRecordPayload
  updateReview(input: UpdateReviewInput!): UpdateReviewPayload
  updateStatus(input: UpdateStatusInput!): UpdateStatusPayload
}
type Organization implements Node {
  annictId: Int!
  favoriteOrganizationsCount: Int!
  id: ID!
  name: String!
  nameEn: String!
  nameKana: String!
  staffsCount: Int!
  twitterUsername: String!
  twitterUsernameEn: String!
  url: String!
  urlEn: String!
  wikipediaUrl: String!
  wikipediaUrlEn: String!
}
"The connection type for Organization."
type OrganizationConnection {
  "A list of edges."
  edges: [OrganizationEdge]
  "A list of nodes."
  nodes: [Organization]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type OrganizationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Organization
}
"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}
type Person implements Node {
  annictId: Int!
  birthday: String!
  bloodType: String!
  castsCount: Int!
  favoritePeopleCount: Int!
  genderText: String!
  height: String!
  id: ID!
  name: String!
  nameEn: String!
  nameKana: String!
  nickname: String!
  nicknameEn: String!
  prefecture: Prefecture!
  staffsCount: Int!
  twitterUsername: String!
  twitterUsernameEn: String!
  url: String!
  urlEn: String!
  wikipediaUrl: String!
  wikipediaUrlEn: String!
}
"The connection type for Person."
type PersonConnection {
  "A list of edges."
  edges: [PersonEdge]
  "A list of nodes."
  nodes: [Person]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type PersonEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Person
}
type Prefecture implements Node {
  annictId: Int!
  id: ID!
  name: String!
}
type Program implements Node {
  annictId: Int!
  channel: Channel!
  episode: Episode!
  id: ID!
  rebroadcast: Boolean!
  scPid: Int
  startedAt: DateTime!
  state: ProgramState!
  work: Work!
}
"The connection type for Program."
type ProgramConnection {
  "A list of edges."
  edges: [ProgramEdge]
  "A list of nodes."
  nodes: [Program]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type ProgramEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Program
}
type Query {
  "Fetches an object given its ID."
  node(
    "ID of the object."
    id: ID!
  ): Node
  "Fetches a list of objects given a list of IDs."
  nodes(
    "IDs of the objects."
    ids: [ID!]!
  ): [Node]!
  searchCharacters(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    annictIds: [Int!], 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    names: [String!], 
    orderBy: CharacterOrder
  ): CharacterConnection
  searchEpisodes(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    annictIds: [Int!], 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: EpisodeOrder
  ): EpisodeConnection
  searchOrganizations(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    annictIds: [Int!], 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    names: [String!], 
    orderBy: OrganizationOrder
  ): OrganizationConnection
  searchPeople(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    annictIds: [Int!], 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    names: [String!], 
    orderBy: PersonOrder
  ): PersonConnection
  searchWorks(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    annictIds: [Int!], 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: WorkOrder, 
    seasons: [String!], 
    titles: [String!]
  ): WorkConnection
  user(username: String!): User
  viewer: User
}
type Record implements Node {
  annictId: Int!
  comment: String
  commentsCount: Int!
  createdAt: DateTime!
  episode: Episode!
  facebookClickCount: Int!
  id: ID!
  likesCount: Int!
  modified: Boolean!
  rating: Float
  ratingState: RatingState
  twitterClickCount: Int!
  updatedAt: DateTime!
  user: User!
  work: Work!
}
"The connection type for Record."
type RecordConnection {
  "A list of edges."
  edges: [RecordEdge]
  "A list of nodes."
  nodes: [Record]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type RecordEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Record
}
type Review implements Node {
  annictId: Int!
  body: String!
  createdAt: DateTime!
  id: ID!
  impressionsCount: Int!
  likesCount: Int!
  modifiedAt: DateTime
  ratingAnimationState: RatingState
  ratingCharacterState: RatingState
  ratingMusicState: RatingState
  ratingOverallState: RatingState
  ratingStoryState: RatingState
  title: String
  updatedAt: DateTime!
  user: User!
  work: Work!
}
"The connection type for Review."
type ReviewConnection {
  "A list of edges."
  edges: [ReviewEdge]
  "A list of nodes."
  nodes: [Review]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type ReviewEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Review
}
type Series implements Node {
  annictId: Int!
  id: ID!
  name: String!
  nameEn: String!
  nameRo: String!
  works(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: SeriesWorkOrder
  ): SeriesWorkConnection
}
"The connection type for Series."
type SeriesConnection {
  "A list of edges."
  edges: [SeriesEdge]
  "A list of nodes."
  nodes: [Series]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type SeriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Series
}
"The connection type for Work."
type SeriesWorkConnection {
  "A list of edges."
  edges: [SeriesWorkEdge]
  "A list of nodes."
  nodes: [Work]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type SeriesWorkEdge {
  "A cursor for use in pagination."
  cursor: String!
  node: Work!
  summary: String
  summaryEn: String
}
type Staff implements Node {
  annictId: Int!
  id: ID!
  name: String!
  nameEn: String!
  resource: StaffResourceItem!
  roleOther: String!
  roleOtherEn: String!
  roleText: String!
  sortNumber: Int!
  work: Work!
}
"The connection type for Staff."
type StaffConnection {
  "A list of edges."
  edges: [StaffEdge]
  "A list of nodes."
  nodes: [Staff]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type StaffEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Staff
}
type Status implements Node {
  annictId: Int!
  createdAt: DateTime!
  id: ID!
  likesCount: Int!
  state: StatusState!
  user: User!
  work: Work!
}
"Autogenerated return type of UpdateRecord"
type UpdateRecordPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  record: Record
}
"Autogenerated return type of UpdateReview"
type UpdateReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  review: Review
}
"Autogenerated return type of UpdateStatus"
type UpdateStatusPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  work: Work
}
type User implements Node {
  activities(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: ActivityOrder
  ): ActivityConnection
  annictId: Int!
  avatarUrl: String
  backgroundImageUrl: String
  createdAt: DateTime!
  description: String!
  email: String
  followers(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserConnection
  followersCount: Int!
  following(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserConnection
  followingActivities(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: ActivityOrder
  ): ActivityConnection
  followingsCount: Int!
  id: ID!
  name: String!
  notificationsCount: Int
  onHoldCount: Int!
  programs(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: ProgramOrder, 
    unwatched: Boolean
  ): ProgramConnection
  records(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    hasComment: Boolean, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: RecordOrder
  ): RecordConnection
  recordsCount: Int!
  stopWatchingCount: Int!
  url: String
  username: String!
  viewerCanFollow: Boolean!
  viewerIsFollowing: Boolean!
  wannaWatchCount: Int!
  watchedCount: Int!
  watchingCount: Int!
  works(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    annictIds: [Int!], 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: WorkOrder, 
    seasons: [String!], 
    state: StatusState, 
    titles: [String!]
  ): WorkConnection
}
"The connection type for User."
type UserConnection {
  "A list of edges."
  edges: [UserEdge]
  "A list of nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type UserEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User
}
"An anime title"
type Work implements Node {
  annictId: Int!
  casts(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: CastOrder
  ): CastConnection
  episodes(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: EpisodeOrder
  ): EpisodeConnection
  episodesCount: Int!
  id: ID!
  image: WorkImage
  malAnimeId: String
  media: Media!
  noEpisodes: Boolean!
  officialSiteUrl: String
  officialSiteUrlEn: String
  programs(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: ProgramOrder
  ): ProgramConnection
  reviews(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    hasBody: Boolean, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: ReviewOrder
  ): ReviewConnection
  reviewsCount: Int!
  satisfactionRate: Float
  seasonName: SeasonName
  seasonYear: Int
  seriesList(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int
  ): SeriesConnection
  staffs(
    "Returns the elements in the list that come after the specified cursor."
    after: String, 
    "Returns the elements in the list that come before the specified cursor."
    before: String, 
    "Returns the first _n_ elements from the list."
    first: Int, 
    "Returns the last _n_ elements from the list."
    last: Int, 
    orderBy: StaffOrder
  ): StaffConnection
  syobocalTid: Int
  title: String!
  titleEn: String
  titleKana: String
  titleRo: String
  twitterHashtag: String
  twitterUsername: String
  viewerStatusState: StatusState
  watchersCount: Int!
  wikipediaUrl: String
  wikipediaUrlEn: String
}
"The connection type for Work."
type WorkConnection {
  "A list of edges."
  edges: [WorkEdge]
  "A list of nodes."
  nodes: [Work]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type WorkEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Work
}
type WorkImage implements Node {
  annictId: Int
  facebookOgImageUrl: String
  id: ID!
  internalUrl(size: String!): String
  recommendedImageUrl: String
  twitterAvatarUrl: String
  twitterBiggerAvatarUrl: String
  twitterMiniAvatarUrl: String
  twitterNormalAvatarUrl: String
  work: Work
}
enum ActivityAction {
  CREATE
}
enum ActivityOrderField {
  CREATED_AT
}
enum CastOrderField {
  CREATED_AT
  SORT_NUMBER
}
enum CharacterOrderField {
  CREATED_AT
  FAVORITE_CHARACTERS_COUNT
}
enum EpisodeOrderField {
  CREATED_AT
  SORT_NUMBER
}
"Media of anime"
enum Media {
  MOVIE
  OTHER
  OVA
  TV
  WEB
}
enum OrderDirection {
  ASC
  DESC
}
enum OrganizationOrderField {
  CREATED_AT
  FAVORITE_ORGANIZATIONS_COUNT
}
enum PersonOrderField {
  CREATED_AT
  FAVORITE_PEOPLE_COUNT
}
enum ProgramOrderField {
  STARTED_AT
}
enum ProgramState {
  HIDDEN
  PUBLISHED
}
enum RatingState {
  AVERAGE
  BAD
  GOOD
  GREAT
}
enum RecordOrderField {
  CREATED_AT
  LIKES_COUNT
}
enum ReviewOrderField {
  CREATED_AT
  LIKES_COUNT
}
"Season name"
enum SeasonName {
  AUTUMN
  SPRING
  SUMMER
  WINTER
}
enum SeriesWorkOrderField {
  SEASON
}
enum StaffOrderField {
  CREATED_AT
  SORT_NUMBER
}
enum StatusState {
  NO_STATE
  ON_HOLD
  STOP_WATCHING
  WANNA_WATCH
  WATCHED
  WATCHING
}
enum WorkOrderField {
  CREATED_AT
  SEASON
  WATCHERS_COUNT
}
"DateTime"
scalar DateTime
input ActivityOrder {
  direction: OrderDirection!
  field: ActivityOrderField!
}
input CastOrder {
  direction: OrderDirection!
  field: CastOrderField!
}
input CharacterOrder {
  direction: OrderDirection!
  field: CharacterOrderField!
}
"Autogenerated input type of CreateRecord"
input CreateRecordInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  comment: String
  episodeId: ID!
  ratingState: RatingState
  shareFacebook: Boolean
  shareTwitter: Boolean
}
"Autogenerated input type of CreateReview"
input CreateReviewInput {
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  ratingAnimationState: RatingState
  ratingCharacterState: RatingState
  ratingMusicState: RatingState
  ratingOverallState: RatingState
  ratingStoryState: RatingState
  shareFacebook: Boolean
  shareTwitter: Boolean
  title: String
  workId: ID!
}
"Autogenerated input type of DeleteRecord"
input DeleteRecordInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  recordId: ID!
}
"Autogenerated input type of DeleteReview"
input DeleteReviewInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  reviewId: ID!
}
input EpisodeOrder {
  direction: OrderDirection!
  field: EpisodeOrderField!
}
input OrganizationOrder {
  direction: OrderDirection!
  field: OrganizationOrderField!
}
input PersonOrder {
  direction: OrderDirection!
  field: PersonOrderField!
}
input ProgramOrder {
  direction: OrderDirection!
  field: ProgramOrderField!
}
input RecordOrder {
  direction: OrderDirection!
  field: RecordOrderField!
}
input ReviewOrder {
  direction: OrderDirection!
  field: ReviewOrderField!
}
input SeriesWorkOrder {
  direction: OrderDirection!
  field: SeriesWorkOrderField!
}
input StaffOrder {
  direction: OrderDirection!
  field: StaffOrderField!
}
"Autogenerated input type of UpdateRecord"
input UpdateRecordInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  comment: String
  ratingState: RatingState
  recordId: ID!
  shareFacebook: Boolean
  shareTwitter: Boolean
}
"Autogenerated input type of UpdateReview"
input UpdateReviewInput {
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  ratingAnimationState: RatingState!
  ratingCharacterState: RatingState!
  ratingMusicState: RatingState!
  ratingOverallState: RatingState!
  ratingStoryState: RatingState!
  reviewId: ID!
  shareFacebook: Boolean
  shareTwitter: Boolean
  title: String
}
"Autogenerated input type of UpdateStatus"
input UpdateStatusInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  state: StatusState!
  workId: ID!
}
input WorkOrder {
  direction: OrderDirection!
  field: WorkOrderField!
}
